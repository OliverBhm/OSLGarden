/// 3D Alligator noise implementation.
/// Returned values are in the [0, 1] range.
float alligatorNoise3D(point position) {
    vector cellOffsets[27] = {
        vector( 0,  0,  0),
        vector( 1,  0,  0),
        vector( 1,  1,  0),
        vector( 0,  1,  0),
        vector(-1,  1,  0),
        vector(-1,  0,  0),
        vector(-1, -1,  0),
        vector( 0, -1,  0),
        vector( 1, -1,  0),

        vector( 0,  0, -1),
        vector( 1,  0, -1),
        vector( 1,  1, -1),
        vector( 0,  1, -1),
        vector(-1,  1, -1),
        vector(-1,  0, -1),
        vector(-1, -1, -1),
        vector( 0, -1, -1),
        vector( 1, -1, -1),

        vector( 0,  0,  1),
        vector( 1,  0,  1),
        vector( 1,  1,  1),
        vector( 0,  1,  1),
        vector(-1,  1,  1),
        vector(-1,  0,  1),
        vector(-1, -1,  1),
        vector( 0, -1,  1),
        vector( 1, -1,  1)
    };

    point iPosition = floor(position);

    float firstReverseSmoothPointDistance = 0.0;
    float secondReverseSmoothPointDistance = 0.0;

    for (int cellIndex = 0; cellIndex < 27; ++cellIndex) {
        point cellOrigin = iPosition + cellOffsets[cellIndex];
        vector cellPointOffset = cellnoise(cellOrigin, 0.0);
        point cellPointPosition = cellOrigin + cellPointOffset;

        float cellPointDistance = distance(position, cellPointPosition);

        if (cellPointDistance < 1.0) {
            float reverseSmoothDistance = smoothstep(0.0, 1.0, 1.0 - cellPointDistance);

            float distanceMultiplier = float(cellnoise(cellOrigin, 1.0));
            reverseSmoothDistance *= distanceMultiplier;

            if (firstReverseSmoothPointDistance < reverseSmoothDistance) {
                secondReverseSmoothPointDistance = firstReverseSmoothPointDistance;
                firstReverseSmoothPointDistance = reverseSmoothDistance;
            } else {
                if (secondReverseSmoothPointDistance < reverseSmoothDistance) {
                    secondReverseSmoothPointDistance = reverseSmoothDistance;
                }
            }
        }
    }

    return firstReverseSmoothPointDistance - secondReverseSmoothPointDistance;
}

/// 3D Fractal Alligator noise implementation.
/// Returned values are in the [-1, 1] range.
float fractalAlligatorNoise3D(
    point position,
    float lacunarity,
    float gain,
    int octaveCount
) {
    float noiseValue = 0.0;

    float amplitude = 1.0;

    for (int octave = 0; octave < octaveCount; ++octave) {
        noiseValue += amplitude * (alligatorNoise3D(position) - 0.5);
        position *= lacunarity;
        amplitude *= gain;
    }

    return noiseValue;
}

shader Alligator
(
    float gain = 0.5
        [[ string label = "Gain" ]],

    float frequency = 1.0
        [[ string label = "Frequency" ]],

    int octaves = 8
      [[ string label = "Octaves" ]],

    vector offset = vector(0.0)
      [[ string label = "Offset" ]],

    float lacunarity = 2.0
        [[ string label = "Lacunarity" ]],

    float attenuation = 1.0
        [[ string label = "Falloff" ]],

    output color resultRGB = 0.0,
    output float resultF = 0.0
) {
    point objectPosition = transform("object", P);
    point startPosition = frequency * objectPosition - offset;

    float noiseValue = fractalAlligatorNoise3D(startPosition, lacunarity, gain, octaves);

    noiseValue = 0.5 * noiseValue + 0.5;
    noiseValue = pow(noiseValue, attenuation);

    resultRGB = color(noiseValue);
    resultF = float(noiseValue);
}
